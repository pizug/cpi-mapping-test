/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package com.pizug.cpi.mappingtest;

import java.io.IOException;
import java.net.URI;
import java.net.URISyntaxException;
import java.net.http.HttpClient;
import java.net.http.HttpRequest;
import java.net.http.HttpResponse;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.util.Base64;
import java.util.concurrent.Callable;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.dataformat.yaml.YAMLFactory;
import com.pizug.cpi.mappingtest.config.Config;

import org.xmlunit.builder.DiffBuilder;
import org.xmlunit.builder.Input;
import org.xmlunit.diff.Diff;

import picocli.CommandLine;
import picocli.CommandLine.Command;
import picocli.CommandLine.Option;

@Command(description = "Test your SAP CPI Mapping flows with your local test data", name = "pizug-cpi-mapping-test", mixinStandardHelpOptions = true, version = "0.1")
public class App implements Callable<Integer> {

    @Option(names = { "-d",
            "--directory" }, paramLabel = "DIRECTORY", description = "the directory containing test data and pizugtest.yaml configuration")
    String directoryString;

    public static void main(String[] args) throws URISyntaxException, IOException, InterruptedException {

        int exitCode = new CommandLine(new App()).execute(args);
        System.exit(exitCode);

    }

    @Override
    public Integer call() throws Exception {
        if (directoryString == null) {
            directoryString = ".";
        }

        Path directoryPath = Paths.get(directoryString);
        Path configFile = Paths.get(directoryString, "pizugtest.yaml");

        if (!Files.exists(configFile)) {
            System.out.println("No pizugtest.yaml config file found: " + configFile.normalize().toAbsolutePath());
            return 1;
        }

        ObjectMapper mapper = new ObjectMapper(new YAMLFactory());
        Config config = mapper.readValue(configFile.toFile(), Config.class);

        // ObjectMapper objectMapper = new ObjectMapper();
        // objectMapper.writeValue(System.out, config);

        TestConfiguration rootTestConfiguration = new TestConfiguration();

        rootTestConfiguration.effectiveConfig = config;
        rootTestConfiguration.directory = directoryPath;

        if (config.connections.size() < 1) {
            System.out.println("There should be at least one connection");
            return 1;
        }
        rootTestConfiguration.effectiveConnection = config.connections.get(0);

        String passValue = System.getenv(config.connections.get(0).password_environment_variable);
        if (passValue == null) {
            System.out.println("Password is not present in environment variables");
            return 1;
        }
        rootTestConfiguration.password = passValue;

        Integer successCount = 0;
        Integer failCount = 0;
        searchForCases(rootTestConfiguration, directoryPath);
        for (TestCase tc : rootTestConfiguration.testCases) {

            try {
                System.out.println("Testing: " + rootTestConfiguration.directory.relativize(tc.directory));
                executeTest(rootTestConfiguration, tc);
                if (!tc.isSuccessful) {
                    failCount++;
                    // print error
                    System.out.println(
                            "\u001B[91m" + rootTestConfiguration.directory.relativize(tc.directory) + " failed.");
                    System.out.println("\u001B[91m" + tc.diffText);
                } else {
                    successCount++;
                    System.out.println(
                            "\u001B[32m" + rootTestConfiguration.directory.relativize(tc.directory) + " successful.");
                }

            } catch (Exception e) {
                tc.isSuccessful = false;
                tc.diffText = e.toString();
                failCount++;

                // print error
                System.out
                        .println("\u001B[91m" + rootTestConfiguration.directory.relativize(tc.directory) + " failed.");
                System.out.println("\u001B[91m" + tc.diffText);
            }
            System.out.print("\u001B[0m");
        }
        System.out.println("\n Total:" + Integer.toString(successCount + failCount) + "\u001B[32m Successful:"
                + successCount.toString() + " \u001B[91m Fail:" + failCount.toString() + " \u001B[0m \n");

        if (failCount > 0) {
            return 1;
        }

        return 0;
    }

    private void executeTest(TestConfiguration testConfig, TestCase testCase)
            throws IOException, InterruptedException, URISyntaxException {

        HttpRequest request = HttpRequest.newBuilder()
                .uri(new URI("https://" + testConfig.effectiveConnection.host + testConfig.effectiveConnection.path))
                .header("Authorization", basicAuth(testConfig.effectiveConnection.username, testConfig.password))
                .headers("Content-Type", "text/plain;charset=UTF-8")
                .headers("processdirect_path", testConfig.effectiveConfig.mapping.processdirect_path)
                .POST(HttpRequest.BodyPublishers.ofFile(testCase.input)).build();

        HttpResponse<String> response = HttpClient.newHttpClient().send(request, HttpResponse.BodyHandlers.ofString());

        Diff d = DiffBuilder.compare(Input.fromFile(testCase.expected.toFile()))
                .withTest(Input.fromString(response.body())).ignoreWhitespace().ignoreComments().build();

        testCase.isSuccessful = !d.hasDifferences();
        testCase.diffText = d.getDifferences().toString();
    }

    private static String basicAuth(String username, String password) {
        return "Basic " + Base64.getEncoder().encodeToString((username + ":" + password).getBytes());
    }

    private void searchForCases(TestConfiguration testConfiguration, Path currentDirPath) throws IOException {
        TestCase testCase = new TestCase();
        testCase.directory = currentDirPath;

        Files.list(currentDirPath).forEach(path -> {
            if (Files.isDirectory(path)) {
                try {
                    searchForCases(testConfiguration, path);
                } catch (IOException e) {
                    throw new RuntimeException(e);
                }
            }

            if (Files.isRegularFile(path)) {
                if (path.getFileName().toString().startsWith("input")) {
                    testCase.input = path;
                }
                if (path.getFileName().toString().startsWith("expected")) {
                    testCase.expected = path;
                    if (path.getFileName().toString().endsWith(".xml")) {
                        testCase.expectedType = ExpectedType.XML;
                    }
                }
            }

        });

        if (testCase.input != null && testCase.expected != null && testCase.expectedType != ExpectedType.UNSUPPORTED) {
            testConfiguration.testCases.add(testCase);
        }
    }
}
